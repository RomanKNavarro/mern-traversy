IN THIS TUTORIAL WE'LL FINALLY BE WORKING ON THE FRONT END OF THE GOAL-SETTER APP.
TO RUN: npm run client
BOILERPLATE SHORTCUT FOR OUR JSX FILES: rfce
apperently we're not going to be working much on the backend from here, unlike what I imagined.


we'll be using redux and redux toolkit (website). I installed Redux DevTools for chrome. 

creating the frontend part should look very familiar. We basically just create a react app within our project with "npx create-react-app frontend --template redux"
This will put the app in newly created folder "frontend". We add the redux template, which will install the redux tool kit and the react redux package.  
If you get an error to uninstall react app from system (not in my case) put "npx create-react-app@latest"

in our root package.json, we add "client": "npm start --prefix frontend" under scripts. Now, if we type "npm run client" in terminal, we can run the frontend on the web.
It will look quite different from a react app since we added the redux flag.

Time to clean up frontend folder:
stuff to delete: App.css, logo.svg
In App.js: delete all imports, remove all of body of return statement.
in store.js (in app folder): remove all redux counter bs
index.css: delete everything. Replace with custom CSS from github repo.
features folder: delete the counter folder (used to create default redux template counter thing), giving us an empty features folder

NOW WE'LL CREATE OUR "PAGES":
we'll have 3 pages: a dashboard, login page, and register page. We create pages folder in src. The pages are jsx files.

Optional: downloading ES7 +React/Redux/React-Native snippet vs code extension. With this we can create boilerplate code with a few shortcuts:
rfce:
import React from 'react'

function dashboard() {
  return (
    <div>dashboard</div>
  )
}

export default dashboard

**************************
CREATING ROUTES:
we do this on all the pages. Obviously we'll need routes for these pages, so we create them in the terminal: 
cd frontend
npm i react-router-dom

To use this in our pages, we use import {BrowserRouter as Router, Routes, Route} from 'react-router-dom'. We don't need "import React from 'react'"
so we remove that.

in src, we create new folder "components", where we create Header.jsx for navigation.
From here, we can install react icons in our project via:
cd frontend
npm i react-icons	(causes "found 1 high severity vulnerability", scary)

BEFORE WE GET TO WORKING ON REDUX:
we need to get our backend and frontend running at the same time. 
1. We download the dev dependency "concurrently" package, which allows to run multiple scripts at the same time, in this case: client.js and server.js
	* in root: npm i -D concurrently
2. Now we can see concurrently under our dependencies in package.json. We put this under scripts:
	"dev": "concurrently \"npm run server\" \"npm run client\""
this will run the two commands (escaped with backslashes) simultaneously when we type "npm run dev".
You can test out if the backend's working by going to postman

TIME TO WORK ON REDUX AND BACKEND (now it's getting a bit confusing):
looks like I was wrong on the backend in the beginning. Now that we've created all three pages and prettified them with css, we can move on 

In src, we have a features folder, where we previously had all the unnecessary default counter stuff. Empty until now, we create a 'auth' folder, which 
is going to represent the "auth" part of our global state (stay tuned). Within that we create "authSlice.js", where we'll have our reducers, initial state, etc.
We import this stuff into app/store.js

Now, if we go to our page -> inspector tools -> Redux -> state, we should now see  
auth: {
user(pin):null
isError(pin):false
isSuccess(pin):false
isLoading(pin):false
message(pin):""
}

NOW TO MOVE ON TO REGISTRATION:
recall that in authSlice.js we imported an "createAsyncThunk" func from the redux toolkit, which deals with async. data and the backend.

in the frontend, we install two modules: npm i axios react-toastify (latter lets us show error/success alerts)

in authSlice.js, I forgot what localStorage is!!!!!

IMPORTANT (ADDING PROXIES):
in authService.js, we have our api set as /api/users/, but we want to look at localhost:3000/login (remember, 3000 is for frontend). We can just manually change
our api via "const API_URL = "http://localhost:5000" (5000 is our server). Instead, we'll go to our FRONTEND package.json and add what's called a proxy. In the 
main object (not in any of the nested ones), we add "proxy": "http://localhost:5000". Now, when we make a request, it will look at localhost:5000 and then within that
'/api/users/', which is the correct endpoint.

ADDING EXTRA REDUCERS FOR REGISTER:
the last thing to do in authSlice.js is account for pending, fulfilled, and rejected states. We do this by going to our extraReducers within our authSlice func.  
extraReducers an "async thunk func", and for every one of these states, we'll create a case for it to handle.


NOW TO HOOK UP REGISTER FORM:
we go back to register.jsx (under pages). We want to get our state and dispatch the register func. We import {useSelector, useDispatch} from 'react-redux', among other
things. To use react toastify, there's a couple of simple things we need to do in App.js just to get the toast to show up:
we import {ToastContainer} from 'react-toastify' and import 'react-toastify/dist/ReactToastify.css' and add the containter in the html

With that done, we go back to Register.jsx and import register/reset funcs from authSlice.

CREATE SPINNER ANIMATION FOR ISLOADING:
in register.jsx, "isLoading" is defined but still unused. In components, we create spinner.jsx. We go back to register.jsx and import it there.

THIS IS FREAKING SICK:
back to the website, if we register, it takes us to the dashboard. From here, if we look at the state via the redux toolkit, we'll see, among other vars, the currently
logged in user's info, including token.
Why does this info show? (reminder): in our backend -> userController.js -> registerUser func:
  if (user) {                   // if user is created...
    res.status(201).json({      // status 201 means OK and also that something was created (in this case, a new user)
      _id:  user.id,             // we could just put the token, but we want to send back some other data, like this id
      name: user.name,
      email: user.email,
      token: generateToken(user._id)  // return a token generated with this func as well (see below)
    })  


If we reload the page while in the dashboard, that info will remain thanks to the localStorage value. In dev tools:
Application (NOT under redux) -> local storage (at left) -> http://localhost:3000. Here you can see the user info.

CREATE LOGOUT FUNC:
to logout, we want to effectively destory the current user's token (the local storage value).

We also want all the register funcs (log in/out, etc.) to be in the same place, so we put logout func in authSlice.js (OBVIOUSLY), 
then create the logout func itself in authService.js, where we also have our register func defined. 

now, we want to have a "logout" logo in our header. So, we go to components/header.jsx and create it there.

We now have our logout func defined and implemented, as well as a working logoout icon that shows when user is logged in. However, if we try logging out,
the current state won't be cleared, as we can see our user data in redux dev tools. In authSlice.js, we need to go to our 
extraReducer and create a new case for logging out, which we haven't implemented yet.  

from here, clicking the logout button redirects us to the dashboard and logs us out (button doesn't work for me. Strange: when I start up page, I am immediately logged in.)
FIGURED OUT WHY I COULDN'T LOGOUT; FORGOT TO HAVE 'LOGOUT' EXPORTED IN AUTHSERVICE.JS

NOW TO CREATE LOGIN FUNC:
we've had the login button all along but without any functionality. We create new login func in authSlice.js. Very similar to register so we just copy that and modify it slightly.
Since this is an authService func, we want to create the func itself in that file too.

HOOKING UP THE LOGIN FORM:
basically how we hooked up the register form via register.jsx. We copy over all the imports

users:
CookinSoul, cookin@gmail.com, anthology

DONE. In the next video, we'll redirect out of dashboard if not logged in, and also start working on GOALS. In the features folder, we'll add a goals folder for anything having to
do with our goals state, like creating, deleting, etc. 
























